<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<script type="text/javascript">
			//================================================================
			// Matrix
			//================================================================
			
			function getIdentityMatrix() {
				return  [[1, 0, 0], 
						 [0, 1, 0], 
						 [0, 0, 1]];
			}

			function getScaleMatrix(x, y) {
				return  [[x, 0, 0], 
						 [0, y, 0], 
						 [0, 0, 1]];
			}

			function getMoveMatrix(x, y) {
				return  [[1, 0, x], 
						 [0, 1, y], 
						 [0, 0, 1]];
			}

			function getRotateMatrix(a) {
				return [[cos(a),  -sin(a), 0],
						[sin(a),  cos(a), 0],
						[     0,       0, 1]];
			}

			function determinantMatrix(A) {
				var N         = A.length;
				var B         = [];
				var denom     = 1; 
				var exchanges = 0;
				for ( var i = 0; i < N; ++i ) { 
					B[i] = [];
					for ( var j = 0; j < N; ++j ) {
						B[i][j] = A[i][j];
					}
				}
				for ( var i = 0; i < N-1; ++i ) { 
					var maxN     = i; 
					var maxValue = abs(B[i][i]);
					for ( var j = i+1; j < N; ++j ) { 
						var value = abs(B[j][i]);
						if ( value > maxValue ) { 
							maxN = j; maxValue = value; 
						}
					}
					if ( maxN > i ) { 
						var t   = B[i]; 
						B[i]    = B[maxN]; 
						B[maxN] = t;
						++exchanges;
					} else { 
						if ( maxValue === 0 ) { 
							return maxValue; 
						}
					}
					var value1 = B[i][i];
					for ( var j = i+1; j < N; ++j ) { 
						var value2 = B[j][i];
						B[j][i] = 0;
						for ( var k = i+1; k < N; ++k ) { 
							B[j][k] = (B[j][k] * value1 - B[i][k] * value2) / denom;
						}
					}
					denom = value1;
				}
				if ( exchanges%2 ) {
					return -B[N-1][N-1];
				} else {
					return  B[N-1][N-1];
				}
			}

			function inverseMatrix(A) {
				var det = determinantMatrix(A);
				if ( det === 0 ) {
					return false;
				}
				var N    = A.length;
				var invA = [];
				for ( var i = 0; i < N; i++ ) {
					invA[i] = [];
					for ( var j = 0; j < N; j++ ) {
						var B    = [];
						var sign = ((i+j) % 2 === 0) ? 1 : -1;
						for ( var m = 0; m < j; m++ ) { 
							B[m] = [];
							for ( var n = 0; n < i; n++ ) {
								B[m][n] = A[m][n];
							}
							for ( var n = i+1; n < N; n++ ) {
								B[m][n-1] = A[m][n];
							}
						}
						for ( var m = j+1; m < N; m++ ) { 
							B[m-1] = [];
							for ( var n = 0; n < i; n++ ) { 
								B[m-1][n] = A[m][n];
							}
							for ( var n = i+1; n < N; n++ ) { 
								B[m-1][n-1] = A[m][n];
							}
						}
						invA[i][j] = sign * determinantMatrix(B) / det;
					}
				}
				return invA;
			}5

			function mulMatrix(A, B) {
				var rowsA = A.length;
				var colsA = A[0].length;
				var rowsB = B.length;
				var colsB = B[0].length;
				var C     = [];

				if ( colsA !== rowsB ) {
					return false;
				}
				for ( var i = 0; i < rowsA; i++ ) {
					C[i] = [];
				}
				for ( var k = 0; k < colsB; k++ ) { 
					for ( var i = 0; i < rowsA; i++ ) { 
						var temp = 0;
						for ( var j = 0; j < rowsB; j++ ) {
							temp += A[i][j]*B[j][k];
						}
						C[i][k] = temp;
					}
				 }
				return C;
			}
			
			function getSign(x) { return x >= 0 ? 1 : -1; }
			function sin(a)     { return Math.sin(a);     }
			function cos(a)     { return Math.cos(a);     }
			function sqrt(a)    { return Math.sqrt(a);    }
			function floor(a)   { return Math.floor(a);   }
			function ceil(a)    { return Math.ceil(a);    }
			function round(a)   { return Math.round(a);   }
			function abs(a)     { return Math.abs(a);     }
			function pow(a, b)  { return Math.pow(a, b);  }

			//================================================================
			// Main
			//================================================================
			var canvas, ctx, mainMatrix;
			
			var camera = {
				x:      3,
				y:      5,
				width:  20,
				height: 15,
			}
			
			var screen = {
				width:  800,
				height: 600
			}
			
			var box = {
				x:      3,
				y:      3,
				width:  5,
				height: 2
			}

			var imgOffset = {
				x: 3,
				y: 0
			}
			
			function drawBox() {
				var M = mulMatrix(mainMatrix, getMoveMatrix(box.x, box.y));
				ctx.setTransform(M[0][0], M[1][0], M[0][1], M[1][1], M[0][2], M[1][2]);
				ctx.fillStyle = "#FF0000";
				ctx.fillRect(0, 0, box.width, box.height);
				ctx.fillStyle = "#00FFFF";
				ctx.fillRect(-0.2, -0.2, 0.4, 0.4);
			}
			
			function drawTriangleInBox() {
				var M = mulMatrix(mainMatrix, getMoveMatrix(box.x, box.y));
				ctx.setTransform(M[0][0], M[1][0], M[0][1], M[1][1], M[0][2], M[1][2]);
				ctx.beginPath();
				ctx.moveTo(0,           0);
				ctx.lineTo(box.width,   0);
				ctx.lineTo(box.width/2, box.height);
				ctx.lineTo(0,           0);
				ctx.lineWidth   = 0.1;
				ctx.strokeStyle = '#000000';
				ctx.stroke();
			}
			
			function drawAxis() {
				var M = mainMatrix;
				ctx.setTransform(M[0][0], M[1][0], M[0][1], M[1][1], M[0][2], M[1][2]);
				for ( var i = -10; i <= 10; i++ ) {
					ctx.beginPath();
					ctx.moveTo(-10, i);
					ctx.lineTo( 10, i);
					ctx.lineWidth   = 0.1;
					ctx.strokeStyle = '#00ff00';
					ctx.stroke();
				}
				for ( var i = -10; i <= 10; i++ ) {
					ctx.beginPath();
					ctx.moveTo(i, -10);
					ctx.lineTo(i,  10);
					ctx.lineWidth   = 0.1;
					ctx.strokeStyle = '#00ff00';
					ctx.stroke();
				}
				ctx.fillStyle = "#FF0000";
				ctx.fillRect(-0.1, -0.1, 0.2, 0.2);
				ctx.fillStyle = "#0000FF";
				ctx.fillRect(10, 10, 0.2, 0.2);
			}
			
			function getBoxOffsetMatrix() {
				var M = getIdentityMatrix();
					M = mulMatrix(getScaleMatrix(1, 1), M);
					M = mulMatrix(getRotateMatrix(0.2), M);
					M = mulMatrix(getMoveMatrix(box.x-imgOffset.x, box.y-imgOffset.y), M);
				return M;
			}

			function drawImageInBox() {
				var img = new Image();
				img.src = 'box.jpg';
				img.onload = function() {
					var M = mulMatrix(mainMatrix, getBoxOffsetMatrix());
					ctx.setTransform(M[0][0], M[1][0], M[0][1], M[1][1], M[0][2], M[1][2]);
					ctx.drawImage(img, -box.width/2, -box.height/2, box.width, box.height);
				}
			}

			function drawDogOnBox() {
				var img = new Image();
				img.src = 'dog.jpg';
				img.onload = function() {
					var M = getIdentityMatrix();
						M = mulMatrix(getScaleMatrix(1, 2), M);
						M = mulMatrix(getRotateMatrix(-0.3), M);
						M = mulMatrix(getMoveMatrix(-4, 1), M);
					
						M = mulMatrix(getBoxOffsetMatrix(), M);
						M = mulMatrix(mainMatrix, M);
					ctx.setTransform(M[0][0], M[1][0], M[0][1], M[1][1], M[0][2], M[1][2]);
					ctx.drawImage(img, -box.width/2, -box.height/2, box.width, box.height);
				}
			}

			function getCameraMatrix() {
				var c = getIdentityMatrix();
					c = mulMatrix(getScaleMatrix(1, 1),c);
					c = mulMatrix(getRotateMatrix(0.1),c);
					c = mulMatrix(getMoveMatrix(camera.x, camera.y),c);
				return c;
			};

			function getCameraInverseMatrix() {
				return inverseMatrix( getCameraMatrix() );
			};
			
			function getScreenMatrix() {
				var s = getIdentityMatrix();
					s = mulMatrix(getScaleMatrix(screen.width/camera.width, screen.height/camera.height),s);
					s = mulMatrix(getRotateMatrix(0),s);
					s = mulMatrix(getMoveMatrix(canvas.width/2, canvas.height/2),s);
				return s;
			};
			
			function clean() {
				ctx.setTransform(1, 0, 0, 1, 0, 0);
				ctx.fillStyle = "#FFEBCD";
				ctx.fillRect(0, 0, screen.width, screen.height);
			}

			function main() {
				canvas = document.getElementById("mainCanvas");
				ctx    = canvas.getContext("2d");

				mainMatrix = mulMatrix(getScreenMatrix(), getCameraInverseMatrix());
				
				clean();
				drawAxis();
				drawBox();
				
				drawTriangleInBox();
				drawImageInBox();
				drawDogOnBox();
			}
			
			function calc(x, y, w, h) {
				camera.x      = document.getElementById("cameraX").value;
				camera.y      = document.getElementById("cameraY").value;
				camera.width  = document.getElementById("cameraW").value;
				camera.height = document.getElementById("cameraH").value;
				main();
			}
		</script>
	</head>
	<body bgcolor="#ffebcd" onload="main()">
		<canvas width="800" height="600" style="border: 2px solid black" id="mainCanvas"></canvas>
		<form onsubmit="calc();return false;">
			<input type="text" id="cameraX" value="3"> - X<br>
			<input type="text" id="cameraY" value="5"> - Y<br>
			<input type="text" id="cameraW" value="20"> - W<br>
			<input type="text" id="cameraH" value="15"> - H<br>
			<button>calc</button>
		</form>
	</body>
</html>
